{"uid":"68489d11917cc1a5","name":"test Adjacent square","fullName":"src.test.java.challenges.adjacentSquare.test_adjacent_square#test_adjacent_square","historyId":"fe26e063848287f779ae616a1abd627f","time":{"start":1700323772308,"stop":1700323772308,"duration":0},"status":"failed","statusMessage":"AssertionError: assert [3, 1, 0, 4, 5] == []\n  Left contains 5 more items, first extra item: 3\n  Full diff:\n  - []\n  + [3, 1, 0, 4, 5]","statusTrace":"input_array = [5, 4, 3, 1, 0], expected_result = [3, 1, 0, 4, 5]\n\n    @allure.epic(\"epic Challenges\")\n    @allure.feature(\"feature Challenges by date\")\n    @allure.story(\"story Adjacent square\")\n    @allure.parent_suite(\"suite Python\")\n    @allure.title(\"test Adjacent square\")\n    @allure.tag(\"tag Python\")\n    # @pytest.mark.skip(reason=\"TODO: no way of currently testing this\")\n    @pytest.mark.parametrize(\"input_array,expected_result\", test_data)\n    def test_adjacent_square(input_array: List[int], expected_result: List[int]):\n>       assert expected_result == adjacentSquare(input_array)\nE       assert [3, 1, 0, 4, 5] == []\nE         Left contains 5 more items, first extra item: 3\nE         Full diff:\nE         - []\nE         + [3, 1, 0, 4, 5]\n\nsrc/test/java/challenges/adjacentSquare/test_adjacent_square.py:30: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert [3, 1, 0, 4, 5] == []\n  Left contains 5 more items, first extra item: 3\n  Full diff:\n  - []\n  + [3, 1, 0, 4, 5]","statusTrace":"input_array = [5, 4, 3, 1, 0], expected_result = [3, 1, 0, 4, 5]\n\n    @allure.epic(\"epic Challenges\")\n    @allure.feature(\"feature Challenges by date\")\n    @allure.story(\"story Adjacent square\")\n    @allure.parent_suite(\"suite Python\")\n    @allure.title(\"test Adjacent square\")\n    @allure.tag(\"tag Python\")\n    # @pytest.mark.skip(reason=\"TODO: no way of currently testing this\")\n    @pytest.mark.parametrize(\"input_array,expected_result\", test_data)\n    def test_adjacent_square(input_array: List[int], expected_result: List[int]):\n>       assert expected_result == adjacentSquare(input_array)\nE       assert [3, 1, 0, 4, 5] == []\nE         Left contains 5 more items, first extra item: 3\nE         Full diff:\nE         - []\nE         + [3, 1, 0, 4, 5]\n\nsrc/test/java/challenges/adjacentSquare/test_adjacent_square.py:30: AssertionError","steps":[],"attachments":[{"uid":"72b135a56c379587","name":"stdout","source":"72b135a56c379587.txt","type":"text/plain","size":41}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"feature","value":"feature Challenges by date"},{"name":"parentSuite","value":"suite Python"},{"name":"story","value":"story Adjacent square"},{"name":"epic","value":"epic Challenges"},{"name":"tag","value":"tag Python"},{"name":"suite","value":"test_adjacent_square"},{"name":"host","value":"fv-az1538-777"},{"name":"thread","value":"2236-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.test.java.challenges.adjacentSquare.test_adjacent_square"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_result","value":"[3, 1, 0, 4, 5]"},{"name":"input_array","value":"[5, 4, 3, 1, 0]"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["tag Python"]},"source":"68489d11917cc1a5.json","parameterValues":["[3, 1, 0, 4, 5]","[5, 4, 3, 1, 0]"]}