{
  "uid" : "e505250b036ef5a1",
  "name" : "test Adjacent square",
  "fullName" : "src.test.java.challenges.adjacentSquare.test_adjacent_square#test_adjacent_square",
  "historyId" : "3cdc38685c7619dce6a75cb3b7cd1ec4",
  "time" : {
    "start" : 1700323772298,
    "stop" : 1700323772298,
    "duration" : 0
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert [6, 3, 1, 15] == []\n  Left contains 4 more items, first extra item: 6\n  Full diff:\n  - []\n  + [6, 3, 1, 15]",
  "statusTrace" : "input_array = [1, 3, 6, 15], expected_result = [6, 3, 1, 15]\n\n    @allure.epic(\"epic Challenges\")\n    @allure.feature(\"feature Challenges by date\")\n    @allure.story(\"story Adjacent square\")\n    @allure.parent_suite(\"suite Python\")\n    @allure.title(\"test Adjacent square\")\n    @allure.tag(\"tag Python\")\n    # @pytest.mark.skip(reason=\"TODO: no way of currently testing this\")\n    @pytest.mark.parametrize(\"input_array,expected_result\", test_data)\n    def test_adjacent_square(input_array: List[int], expected_result: List[int]):\n>       assert expected_result == adjacentSquare(input_array)\nE       assert [6, 3, 1, 15] == []\nE         Left contains 4 more items, first extra item: 6\nE         Full diff:\nE         - []\nE         + [6, 3, 1, 15]\n\nsrc/test/java/challenges/adjacentSquare/test_adjacent_square.py:30: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert [6, 3, 1, 15] == []\n  Left contains 4 more items, first extra item: 6\n  Full diff:\n  - []\n  + [6, 3, 1, 15]",
    "statusTrace" : "input_array = [1, 3, 6, 15], expected_result = [6, 3, 1, 15]\n\n    @allure.epic(\"epic Challenges\")\n    @allure.feature(\"feature Challenges by date\")\n    @allure.story(\"story Adjacent square\")\n    @allure.parent_suite(\"suite Python\")\n    @allure.title(\"test Adjacent square\")\n    @allure.tag(\"tag Python\")\n    # @pytest.mark.skip(reason=\"TODO: no way of currently testing this\")\n    @pytest.mark.parametrize(\"input_array,expected_result\", test_data)\n    def test_adjacent_square(input_array: List[int], expected_result: List[int]):\n>       assert expected_result == adjacentSquare(input_array)\nE       assert [6, 3, 1, 15] == []\nE         Left contains 4 more items, first extra item: 6\nE         Full diff:\nE         - []\nE         + [6, 3, 1, 15]\n\nsrc/test/java/challenges/adjacentSquare/test_adjacent_square.py:30: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9fedaafb71c22c92",
      "name" : "stdout",
      "source" : "9fedaafb71c22c92.txt",
      "type" : "text/plain",
      "size" : 26
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "feature Challenges by date"
  }, {
    "name" : "parentSuite",
    "value" : "suite Python"
  }, {
    "name" : "story",
    "value" : "story Adjacent square"
  }, {
    "name" : "epic",
    "value" : "epic Challenges"
  }, {
    "name" : "tag",
    "value" : "tag Python"
  }, {
    "name" : "suite",
    "value" : "test_adjacent_square"
  }, {
    "name" : "host",
    "value" : "fv-az1538-777"
  }, {
    "name" : "thread",
    "value" : "2236-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "src.test.java.challenges.adjacentSquare.test_adjacent_square"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expected_result",
    "value" : "[6, 3, 1, 15]"
  }, {
    "name" : "input_array",
    "value" : "[1, 3, 6, 15]"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "tag Python" ]
  },
  "source" : "e505250b036ef5a1.json",
  "parameterValues" : [ "[6, 3, 1, 15]", "[1, 3, 6, 15]" ]
}