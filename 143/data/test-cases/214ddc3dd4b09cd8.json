{"uid":"214ddc3dd4b09cd8","name":"test Python","fullName":"src.test.java.challenges.a20201217_runningWater.test_running_water#test_running_water","historyId":"d4e6dbdc944e84c1da86a6e42f3cf5a4","time":{"start":1700256347270,"stop":1700256347270,"duration":0},"status":"failed","statusMessage":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","statusTrace":"cap = [80, 61, 76], volume = 80, expected_result = True\n\n    @allure.epic(\"epic Challenges\")\n    @allure.feature(\"feature Challenges by date\")\n    @allure.story(\"story Running water\")\n    @allure.parent_suite(\"suite Python\")\n    @allure.title(\"test Python\")\n    @allure.tag(\"tag Python\")\n    # @pytest.mark.skip(reason=\"TODO: no way of currently testing this\")\n    @pytest.mark.parametrize(\"cap,volume,expected_result\", test_data)\n    def test_running_water(cap: List[int], volume: int, expected_result: bool):\n>       assert expected_result == runningWater(cap, volume)\nE       assert True == False\nE        +  where False = runningWater([80, 61, 76], 80)\n\nsrc/test/java/challenges/a20201217_runningWater/test_running_water.py:30: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"feature Challenges by date"},{"name":"tag","value":"tag Python"},{"name":"parentSuite","value":"suite Python"},{"name":"story","value":"story Running water"},{"name":"epic","value":"epic Challenges"},{"name":"suite","value":"test_running_water"},{"name":"host","value":"fv-az1535-641"},{"name":"thread","value":"2215-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.test.java.challenges.a20201217_runningWater.test_running_water"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cap","value":"[80, 61, 76]"},{"name":"expected_result","value":"True"},{"name":"volume","value":"80"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":132,"broken":0,"skipped":3,"passed":0,"unknown":0,"total":135},"items":[{"uid":"d10fb0a4bf1cf95e","reportUrl":"https://apetrovskiy.github.io/testCoSi/142//#testresult/d10fb0a4bf1cf95e","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1700255324873,"stop":1700255324874,"duration":1}},{"uid":"7cc2e9e9e0cbd03b","reportUrl":"https://apetrovskiy.github.io/testCoSi/141//#testresult/7cc2e9e9e0cbd03b","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1700254470582,"stop":1700254470582,"duration":0}},{"uid":"954c5f271262fb9d","reportUrl":"https://apetrovskiy.github.io/testCoSi/140//#testresult/954c5f271262fb9d","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1700246467826,"stop":1700246467826,"duration":0}},{"uid":"34bda8d7d2d9fe4e","reportUrl":"https://apetrovskiy.github.io/testCoSi/139//#testresult/34bda8d7d2d9fe4e","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699886397628,"stop":1699886397628,"duration":0}},{"uid":"1f99ad79e09c0108","reportUrl":"https://apetrovskiy.github.io/testCoSi/138//#testresult/1f99ad79e09c0108","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699884948323,"stop":1699884948323,"duration":0}},{"uid":"5db194ecafcfe036","reportUrl":"https://apetrovskiy.github.io/testCoSi/137//#testresult/5db194ecafcfe036","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699884922591,"stop":1699884922591,"duration":0}},{"uid":"b313f64d58f8348","reportUrl":"https://apetrovskiy.github.io/testCoSi/136//#testresult/b313f64d58f8348","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699563854703,"stop":1699563854704,"duration":1}},{"uid":"2e04f93343904995","reportUrl":"https://apetrovskiy.github.io/testCoSi/135//#testresult/2e04f93343904995","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699550001130,"stop":1699550001130,"duration":0}},{"uid":"e78ff318f38339fa","reportUrl":"https://apetrovskiy.github.io/testCoSi/133//#testresult/e78ff318f38339fa","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699518512646,"stop":1699518512647,"duration":1}},{"uid":"88d9ad250a5e96","reportUrl":"https://apetrovskiy.github.io/testCoSi/134//#testresult/88d9ad250a5e96","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699517732632,"stop":1699517732632,"duration":0}},{"uid":"8b8437cd3b6892f5","reportUrl":"https://apetrovskiy.github.io/testCoSi/132//#testresult/8b8437cd3b6892f5","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699465982036,"stop":1699465982036,"duration":0}},{"uid":"97e7979d97907d10","reportUrl":"https://apetrovskiy.github.io/testCoSi/131//#testresult/97e7979d97907d10","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699463230680,"stop":1699463230680,"duration":0}},{"uid":"407681e47da34dd1","reportUrl":"https://apetrovskiy.github.io/testCoSi/130//#testresult/407681e47da34dd1","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699462400508,"stop":1699462400508,"duration":0}},{"uid":"566973bf2c3104cd","reportUrl":"https://apetrovskiy.github.io/testCoSi/129//#testresult/566973bf2c3104cd","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699458213398,"stop":1699458213398,"duration":0}},{"uid":"714371889101c613","reportUrl":"https://apetrovskiy.github.io/testCoSi/128//#testresult/714371889101c613","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699454632224,"stop":1699454632224,"duration":0}},{"uid":"4bc5ae75749a1f0d","reportUrl":"https://apetrovskiy.github.io/testCoSi/127//#testresult/4bc5ae75749a1f0d","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699448606365,"stop":1699448606365,"duration":0}},{"uid":"82eafa2490576303","reportUrl":"https://apetrovskiy.github.io/testCoSi/126//#testresult/82eafa2490576303","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699406742472,"stop":1699406742473,"duration":1}},{"uid":"53d63b6dbaa1cd10","reportUrl":"https://apetrovskiy.github.io/testCoSi/125//#testresult/53d63b6dbaa1cd10","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699406580585,"stop":1699406580585,"duration":0}},{"uid":"b7bd84080cd56cd0","reportUrl":"https://apetrovskiy.github.io/testCoSi/124//#testresult/b7bd84080cd56cd0","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699405681784,"stop":1699405681784,"duration":0}},{"uid":"5f3ce24a1ce8924f","reportUrl":"https://apetrovskiy.github.io/testCoSi/123//#testresult/5f3ce24a1ce8924f","status":"failed","statusDetails":"AssertionError: assert True == False\n +  where False = runningWater([80, 61, 76], 80)","time":{"start":1699405244316,"stop":1699405244316,"duration":0}}]},"tags":["tag Python"]},"source":"214ddc3dd4b09cd8.json","parameterValues":["[80, 61, 76]","True","80"]}