{"uid":"6609decc7bb33e55","name":"test Combination sum","fullName":"src.test.java.challenges.a20200530_combinationSum.test_combinationSum#test_combinationSum","historyId":"8f6bee7951217ef06581927c46d3d176","time":{"start":1700264610524,"stop":1700264610524,"duration":0},"status":"failed","statusMessage":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","statusTrace":"input_array = [3, 8, 3, 9], sum = 17, expected_result = '(3 3 3 8)(8 9)'\n\n    @allure.epic(\"epic Challenges\")\n    @allure.feature(\"feature Challenges by date\")\n    @allure.story(\"story Combination sum\")\n    @allure.parent_suite(\"suite Python\")\n    @allure.title(\"test Combination sum\")\n    @allure.tag(\"tag Python\")\n    @pytest.mark.parametrize(\n        \"input_array,sum,expected_result\",\n        [\n            ([2, 3, 5, 9], 9, \"(2 2 2 3)(2 2 5)(3 3 3)(9)\"),\n            ([2, 4, 6, 8], 8, \"(2 2 2 2)(2 2 4)(2 6)(4 4)(8)\"),\n            (\n                [8, 1, 8, 6, 8],\n                12,\n                \"(1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 6)(1 1 1 1 8)(6 6)\",\n            ),\n            (\n                [7, 2, 6, 5],\n                16,\n                \"(2 2 2 2 2 2 2 2)(2 2 2 2 2 6)(2 2 2 5 5)(2 2 5 7)(2 2 6 6)(2 7 7)(5 5 6)\",\n            ),\n            # 5\n            (\n                [6, 5, 7, 1, 8, 2, 9, 9, 7, 7, 9],\n                6,\n                \"(1 1 1 1 1 1)(1 1 1 1 2)(1 1 2 2)(1 5)(2 2 2)(6)\",\n            ),\n            ([5, 2, 2, 6], 3, \"Empty\"),\n            ([4, 6, 4, 2], 7, \"Empty\"),\n            (\n                [8, 7, 1],\n                22,\n                \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 7)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 8)(1 1 1 1 1 1 1 1 7 7)(1 1 1 1 1 1 1 7 8)(1 1 1 1 1 1 8 8)(1 7 7 7)(7 7 8)\",\n            ),\n            # 9\n            (\n                [6, 5, 6, 3, 3, 4, 3, 2, 2, 9, 9],\n                24,\n                \"(2 2 2 2 2 2 2 2 2 2 2 2)(2 2 2 2 2 2 2 2 2 2 4)(2 2 2 2 2 2 2 2 2 3 3)(2 2 2 2 2 2 2 2 2 6)(2 2 2 2 2 2 2 2 3 5)(2 2 2 2 2 2 2 2 4 4)(2 2 2 2 2 2 2 3 3 4)(2 2 2 2 2 2 2 4 6)(2 2 2 2 2 2 2 5 5)(2 2 2 2 2 2 3 3 3 3)(2 2 2 2 2 2 3 3 6)(2 2 2 2 2 2 3 4 5)(2 2 2 2 2 2 3 9)(2 2 2 2 2 2 4 4 4)(2 2 2 2 2 2 6 6)(2 2 2 2 2 3 3 3 5)(2 2 2 2 2 3 3 4 4)(2 2 2 2 2 3 5 6)(2 2 2 2 2 4 4 6)(2 2 2 2 2 4 5 5)(2 2 2 2 2 5 9)(2 2 2 2 3 3 3 3 4)(2 2 2 2 3 3 4 6)(2 2 2 2 3 3 5 5)(2 2 2 2 3 4 4 5)(2 2 2 2 3 4 9)(2 2 2 2 4 4 4 4)(2 2 2 2 4 6 6)(2 2 2 2 5 5 6)(2 2 2 3 3 3 3 3 3)(2 2 2 3 3 3 3 6)(2 2 2 3 3 3 4 5)(2 2 2 3 3 3 9)(2 2 2 3 3 4 4 4)(2 2 2 3 3 6 6)(2 2 2 3 4 5 6)(2 2 2 3 5 5 5)(2 2 2 3 6 9)(2 2 2 4 4 4 6)(2 2 2 4 4 5 5)(2 2 2 4 5 9)(2 2 2 6 6 6)(2 2 2 9 9)(2 2 3 3 3 3 3 5)(2 2 3 3 3 3 4 4)(2 2 3 3 3 5 6)(2 2 3 3 4 4 6)(2 2 3 3 4 5 5)(2 2 3 3 5 9)(2 2 3 4 4 4 5)(2 2 3 4 4 9)(2 2 3 5 6 6)(2 2 4 4 4 4 4)(2 2 4 4 6 6)(2 2 4 5 5 6)(2 2 5 5 5 5)(2 2 5 6 9)(2 3 3 3 3 3 3 4)(2 3 3 3 3 4 6)(2 3 3 3 3 5 5)(2 3...\",\n            ),\n            ([6, 5, 5, 7], 1, \"Empty\"),\n            ([7, 3, 9, 8, 4, 5], 8, \"(3 5)(4 4)(8)\"),\n            (\n                [1, 1, 1, 3, 7, 3],\n                15,\n                \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 1 1 7)(1 1 1 1 1 1 3 3 3)(1 1 1 1 1 3 7)(1 1 1 3 3 3 3)(1 1 3 3 7)(1 7 7)(3 3 3 3 3)\",\n            ),\n            # 13\n            ([6, 8, 7, 7, 9], 14, \"(6 8)(7 7)\"),\n            ([7, 3, 9, 2, 7, 7], 2, \"(2)\"),\n            ([6, 3, 7], 18, \"(3 3 3 3 3 3)(3 3 3 3 6)(3 3 6 6)(6 6 6)\"),\n            ([3, 8, 3, 9], 17, \"(3 3 3 8)(8 9)\"),\n            # 17\n            ([4, 3, 1], 3, \"(1 1 1)(3)\"),\n            ([8, 6, 4, 7, 6, 5, 3, 6, 3], 4, \"(4)\"),\n            ([3, 9, 4], 20, \"(3 3 3 3 4 4)(3 4 4 9)(4 4 4 4 4)\"),\n            ([1, 8], 16, \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 8)(8 8)\"),\n            # 21\n            ([4, 7], 24, \"(4 4 4 4 4 4)\"),\n            ([2, 3, 7, 5, 3, 3, 8, 9, 6, 2], 1, \"Empty\"),\n            ([5, 9, 5, 7, 8], 13, \"(5 8)\"),\n            (\n                [7, 1, 9, 5, 1, 8, 5, 3],\n                13,\n                \"(1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)\",\n            ),\n            # 25\n            (\n                [6, 3, 4, 8, 9, 8, 9, 2, 4, 8],\n                19,\n                \"(2 2 2 2 2 2 2 2 3)(2 2 2 2 2 2 3 4)(2 2 2 2 2 3 3 3)(2 2 2 2 2 3 6)(2 2 2 2 2 9)(2 2 2 2 3 4 4)(2 2 2 2 3 8)(2 2 2 3 3 3 4)(2 2 2 3 4 6)(2 2 2 4 9)(2 2 3 3 3 3 3)(2 2 3 3 3 6)(2 2 3 3 9)(2 2 3 4 4 4)(2 2 3 4 8)(2 2 3 6 6)(2 2 6 9)(2 3 3 3 4 4)(2 3 3 3 8)(2 3 4 4 6)(2 3 6 8)(2 4 4 9)(2 8 9)(3 3 3 3 3 4)(3 3 3 4 6)(3 3 4 9)(3 4 4 4 4)(3 4 4 8)(3 4 6 6)(3 8 8)(4 6 9)\",\n            ),\n            (\n                [4, 7, 7, 1, 3, 2, 8, 8, 9, 3],\n                7,\n                \"(1 1 1 1 1 1 1)(1 1 1 1 1 2)(1 1 1 1 3)(1 1 1 2 2)(1 1 1 4)(1 1 2 3)(1 2 2 2)(1 2 4)(1 3 3)(2 2 3)(3 4)(7)\",\n            ),\n            ([8, 5], 4, \"Empty\"),\n            (\n                [7, 1, 3, 1, 3, 4, 7, 3, 9, 6],\n                23,\n                \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 7)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 6)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 9)(1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 3 7)(1 1 1 1 1 1 1 1 1 1 1 1 1 4 6)(1 1 1 1 1 1 1 1 1 1 1 1 3 4 4)(1 1 1 1 1 1 1 1 1 1 1 1 4 7)(1 1 1 1 1 1 1 1 1 1 1 3 3 3 3)(1 1 1 1 1 1 1 1 1 1 1 3 3 6)(1 1 1 1 1 1 1 1 1 1 1 3 9)(1 1 1 1 1 1 1 1 1 1 1 4 4 4)(1 1 1 1 1 1 1 1 1 1 1 6 6)(1 1 1 1 1 1 1 1 1 1 3 3 3 4)(1 1 1 1 1 1 1 1 1 1 3 3 7)(1 1 1 1 1 1 1 1 1 1 3 4 6)(1 1 1 1 1 1 1 1 1 1 4 9)(1 1 1 1 1 1 1 1 1 1 6 7)(1 1 1 1 1 1 1 1 1 3 3 4 4)(1 1 1 1 1 1 1 1 1 3 4 7)(1 1 1 1 1 1 1 1 1 4 4 6)(1 1 1 1 1 1 1 1 1 7 7)(1 1 1 1 1 1 1 1 3 3 3 3 3)(1 1 1 1 1 1 1 1 3 3 3 6)(1 1...\",\n            ),\n        ],\n    )\n    def test_combinationSum(input_array: List[int], sum: int, expected_result: str):\n>       assert expected_result == combinationSum(input_array, sum)\nE       AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\nE         - (1 1)(1 1)(1 1)(1 1)\nE         + (3 3 3 8)(8 9)\n\nsrc/test/java/challenges/a20200530_combinationSum/test_combinationSum.py:93: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"story","value":"story Combination sum"},{"name":"tag","value":"tag Python"},{"name":"parentSuite","value":"suite Python"},{"name":"feature","value":"feature Challenges by date"},{"name":"epic","value":"epic Challenges"},{"name":"suite","value":"test_combinationSum"},{"name":"host","value":"fv-az985-217"},{"name":"thread","value":"2189-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.test.java.challenges.a20200530_combinationSum.test_combinationSum"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_result","value":"'(3 3 3 8)(8 9)'"},{"name":"input_array","value":"[3, 8, 3, 9]"},{"name":"sum","value":"17"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":87,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":87},"items":[{"uid":"27dc0960a51248de","reportUrl":"https://apetrovskiy.github.io/testCoSi/144//#testresult/27dc0960a51248de","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1700264448054,"stop":1700264448054,"duration":0}},{"uid":"eed1e2dfb2ce3eb2","reportUrl":"https://apetrovskiy.github.io/testCoSi/143//#testresult/eed1e2dfb2ce3eb2","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1700256347174,"stop":1700256347174,"duration":0}},{"uid":"d07ab52ba565995","reportUrl":"https://apetrovskiy.github.io/testCoSi/142//#testresult/d07ab52ba565995","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1700255324779,"stop":1700255324780,"duration":1}},{"uid":"422bd05d7e38166c","reportUrl":"https://apetrovskiy.github.io/testCoSi/141//#testresult/422bd05d7e38166c","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1700254470489,"stop":1700254470489,"duration":0}},{"uid":"21603018bd30651","reportUrl":"https://apetrovskiy.github.io/testCoSi/140//#testresult/21603018bd30651","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1700246467731,"stop":1700246467731,"duration":0}},{"uid":"9938e635b86134ce","reportUrl":"https://apetrovskiy.github.io/testCoSi/139//#testresult/9938e635b86134ce","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1699886397490,"stop":1699886397491,"duration":1}},{"uid":"b40f37a0aac0e3dc","reportUrl":"https://apetrovskiy.github.io/testCoSi/138//#testresult/b40f37a0aac0e3dc","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1699884948229,"stop":1699884948229,"duration":0}},{"uid":"2aa61417b330dc9a","reportUrl":"https://apetrovskiy.github.io/testCoSi/137//#testresult/2aa61417b330dc9a","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1699884922481,"stop":1699884922481,"duration":0}},{"uid":"23dd6288ff2bdcdf","reportUrl":"https://apetrovskiy.github.io/testCoSi/136//#testresult/23dd6288ff2bdcdf","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1699563854597,"stop":1699563854598,"duration":1}},{"uid":"83e42b9b7d5b74ab","reportUrl":"https://apetrovskiy.github.io/testCoSi/135//#testresult/83e42b9b7d5b74ab","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1699550001012,"stop":1699550001013,"duration":1}},{"uid":"c88218a750d16348","reportUrl":"https://apetrovskiy.github.io/testCoSi/133//#testresult/c88218a750d16348","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1699518512551,"stop":1699518512552,"duration":1}},{"uid":"2de5de2d629830b4","reportUrl":"https://apetrovskiy.github.io/testCoSi/134//#testresult/2de5de2d629830b4","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1699517732535,"stop":1699517732535,"duration":0}},{"uid":"1e25cbea3a5cee3c","reportUrl":"https://apetrovskiy.github.io/testCoSi/132//#testresult/1e25cbea3a5cee3c","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1699465981939,"stop":1699465981940,"duration":1}},{"uid":"bf8eed5655aaad9b","reportUrl":"https://apetrovskiy.github.io/testCoSi/131//#testresult/bf8eed5655aaad9b","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1699463230568,"stop":1699463230569,"duration":1}},{"uid":"6edbf605ea3e44d","reportUrl":"https://apetrovskiy.github.io/testCoSi/130//#testresult/6edbf605ea3e44d","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1699462400385,"stop":1699462400385,"duration":0}},{"uid":"31ef47f1d00133f4","reportUrl":"https://apetrovskiy.github.io/testCoSi/129//#testresult/31ef47f1d00133f4","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1699458213258,"stop":1699458213259,"duration":1}},{"uid":"482ec217acbde2c6","reportUrl":"https://apetrovskiy.github.io/testCoSi/128//#testresult/482ec217acbde2c6","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1699454632134,"stop":1699454632134,"duration":0}},{"uid":"5201f9f364711770","reportUrl":"https://apetrovskiy.github.io/testCoSi/127//#testresult/5201f9f364711770","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1699448606274,"stop":1699448606275,"duration":1}},{"uid":"d04d576d49308672","reportUrl":"https://apetrovskiy.github.io/testCoSi/126//#testresult/d04d576d49308672","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1699406742335,"stop":1699406742335,"duration":0}},{"uid":"29c9d157e5bfa4e3","reportUrl":"https://apetrovskiy.github.io/testCoSi/125//#testresult/29c9d157e5bfa4e3","status":"failed","statusDetails":"AssertionError: assert '(3 3 3 8)(8 9)' == '(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)\n  + (3 3 3 8)(8 9)","time":{"start":1699406580450,"stop":1699406580450,"duration":0}}]},"tags":["tag Python"]},"source":"6609decc7bb33e55.json","parameterValues":["'(3 3 3 8)(8 9)'","[3, 8, 3, 9]","17"]}