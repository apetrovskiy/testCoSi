{"uid":"45bc178823ca1851","name":"test_combinationSum[input_array12-14-(6 8)(7 7)]","fullName":"src.test.java.challenges.a20200530_combinationSum.test_combinationSum#test_combinationSum","historyId":"276d1bec87135495d69213486a4b7019","time":{"start":1668278364310,"stop":1668278364310,"duration":0},"status":"failed","statusMessage":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","statusTrace":"input_array = [6, 8, 7, 7, 9], sum = 14, expected_result = '(6 8)(7 7)'\n\n    @pytest.mark.parametrize(\n        \"input_array,sum,expected_result\",\n        [\n            ([2, 3, 5, 9], 9, \"(2 2 2 3)(2 2 5)(3 3 3)(9)\"),\n            ([2, 4, 6, 8], 8, \"(2 2 2 2)(2 2 4)(2 6)(4 4)(8)\"),\n            ([8, 1, 8, 6, 8\n              ], 12, \"(1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 6)(1 1 1 1 8)(6 6)\"),\n            ([7, 2, 6, 5], 16,\n             \"(2 2 2 2 2 2 2 2)(2 2 2 2 2 6)(2 2 2 5 5)(2 2 5 7)(2 2 6 6)(2 7 7)(5 5 6)\"\n             ),\n            # 5\n            ([6, 5, 7, 1, 8, 2, 9, 9, 7, 7, 9\n              ], 6, \"(1 1 1 1 1 1)(1 1 1 1 2)(1 1 2 2)(1 5)(2 2 2)(6)\"),\n            ([5, 2, 2, 6], 3, \"Empty\"),\n            ([4, 6, 4, 2], 7, \"Empty\"),\n            ([8, 7, 1], 22,\n             \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 7)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 8)(1 1 1 1 1 1 1 1 7 7)(1 1 1 1 1 1 1 7 8)(1 1 1 1 1 1 8 8)(1 7 7 7)(7 7 8)\"\n             ),\n            # 9\n            ([6, 5, 6, 3, 3, 4, 3, 2, 2, 9, 9], 24,\n             \"(2 2 2 2 2 2 2 2 2 2 2 2)(2 2 2 2 2 2 2 2 2 2 4)(2 2 2 2 2 2 2 2 2 3 3)(2 2 2 2 2 2 2 2 2 6)(2 2 2 2 2 2 2 2 3 5)(2 2 2 2 2 2 2 2 4 4)(2 2 2 2 2 2 2 3 3 4)(2 2 2 2 2 2 2 4 6)(2 2 2 2 2 2 2 5 5)(2 2 2 2 2 2 3 3 3 3)(2 2 2 2 2 2 3 3 6)(2 2 2 2 2 2 3 4 5)(2 2 2 2 2 2 3 9)(2 2 2 2 2 2 4 4 4)(2 2 2 2 2 2 6 6)(2 2 2 2 2 3 3 3 5)(2 2 2 2 2 3 3 4 4)(2 2 2 2 2 3 5 6)(2 2 2 2 2 4 4 6)(2 2 2 2 2 4 5 5)(2 2 2 2 2 5 9)(2 2 2 2 3 3 3 3 4)(2 2 2 2 3 3 4 6)(2 2 2 2 3 3 5 5)(2 2 2 2 3 4 4 5)(2 2 2 2 3 4 9)(2 2 2 2 4 4 4 4)(2 2 2 2 4 6 6)(2 2 2 2 5 5 6)(2 2 2 3 3 3 3 3 3)(2 2 2 3 3 3 3 6)(2 2 2 3 3 3 4 5)(2 2 2 3 3 3 9)(2 2 2 3 3 4 4 4)(2 2 2 3 3 6 6)(2 2 2 3 4 5 6)(2 2 2 3 5 5 5)(2 2 2 3 6 9)(2 2 2 4 4 4 6)(2 2 2 4 4 5 5)(2 2 2 4 5 9)(2 2 2 6 6 6)(2 2 2 9 9)(2 2 3 3 3 3 3 5)(2 2 3 3 3 3 4 4)(2 2 3 3 3 5 6)(2 2 3 3 4 4 6)(2 2 3 3 4 5 5)(2 2 3 3 5 9)(2 2 3 4 4 4 5)(2 2 3 4 4 9)(2 2 3 5 6 6)(2 2 4 4 4 4 4)(2 2 4 4 6 6)(2 2 4 5 5 6)(2 2 5 5 5 5)(2 2 5 6 9)(2 3 3 3 3 3 3 4)(2 3 3 3 3 4 6)(2 3 3 3 3 5 5)(2 3...\"\n             ),\n            ([6, 5, 5, 7], 1, \"Empty\"),\n            ([7, 3, 9, 8, 4, 5], 8, \"(3 5)(4 4)(8)\"),\n            ([1, 1, 1, 3, 7, 3], 15,\n             \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 1 1 7)(1 1 1 1 1 1 3 3 3)(1 1 1 1 1 3 7)(1 1 1 3 3 3 3)(1 1 3 3 7)(1 7 7)(3 3 3 3 3)\"\n             ),\n            # 13\n            ([6, 8, 7, 7, 9], 14, \"(6 8)(7 7)\"),\n            ([7, 3, 9, 2, 7, 7], 2, \"(2)\"),\n            ([6, 3, 7], 18, \"(3 3 3 3 3 3)(3 3 3 3 6)(3 3 6 6)(6 6 6)\"),\n            ([3, 8, 3, 9], 17, \"(3 3 3 8)(8 9)\"),\n            # 17\n            ([4, 3, 1], 3, \"(1 1 1)(3)\"),\n            ([8, 6, 4, 7, 6, 5, 3, 6, 3], 4, \"(4)\"),\n            ([3, 9, 4], 20, \"(3 3 3 3 4 4)(3 4 4 9)(4 4 4 4 4)\"),\n            ([1, 8\n              ], 16, \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 8)(8 8)\"),\n            # 21\n            ([4, 7], 24, \"(4 4 4 4 4 4)\"),\n            ([2, 3, 7, 5, 3, 3, 8, 9, 6, 2], 1, \"Empty\"),\n            ([5, 9, 5, 7, 8], 13, \"(5 8)\"),\n            ([7, 1, 9, 5, 1, 8, 5, 3], 13,\n             \"(1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 5)(1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 7)(1 1 1 1 1 3 5)(1 1 1 1 1 8)(1 1 1 1 3 3 3)(1 1 1 1 9)(1 1 1 3 7)(1 1 1 5 5)(1 1 3 3 5)(1 1 3 8)(1 3 3 3 3)(1 3 9)(1 5 7)(3 3 7)(3 5 5)(5 8)\"\n             ),\n            # 25\n            ([6, 3, 4, 8, 9, 8, 9, 2, 4, 8], 19,\n             \"(2 2 2 2 2 2 2 2 3)(2 2 2 2 2 2 3 4)(2 2 2 2 2 3 3 3)(2 2 2 2 2 3 6)(2 2 2 2 2 9)(2 2 2 2 3 4 4)(2 2 2 2 3 8)(2 2 2 3 3 3 4)(2 2 2 3 4 6)(2 2 2 4 9)(2 2 3 3 3 3 3)(2 2 3 3 3 6)(2 2 3 3 9)(2 2 3 4 4 4)(2 2 3 4 8)(2 2 3 6 6)(2 2 6 9)(2 3 3 3 4 4)(2 3 3 3 8)(2 3 4 4 6)(2 3 6 8)(2 4 4 9)(2 8 9)(3 3 3 3 3 4)(3 3 3 4 6)(3 3 4 9)(3 4 4 4 4)(3 4 4 8)(3 4 6 6)(3 8 8)(4 6 9)\"\n             ),\n            ([4, 7, 7, 1, 3, 2, 8, 8, 9, 3], 7,\n             \"(1 1 1 1 1 1 1)(1 1 1 1 1 2)(1 1 1 1 3)(1 1 1 2 2)(1 1 1 4)(1 1 2 3)(1 2 2 2)(1 2 4)(1 3 3)(2 2 3)(3 4)(7)\"\n             ),\n            ([8, 5], 4, \"Empty\"),\n            ([7, 1, 3, 1, 3, 4, 7, 3, 9, 6], 23,\n             \"(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 7)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 6)(1 1 1 1 1 1 1 1 1 1 1 1 1 1 9)(1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 4)(1 1 1 1 1 1 1 1 1 1 1 1 1 3 7)(1 1 1 1 1 1 1 1 1 1 1 1 1 4 6)(1 1 1 1 1 1 1 1 1 1 1 1 3 4 4)(1 1 1 1 1 1 1 1 1 1 1 1 4 7)(1 1 1 1 1 1 1 1 1 1 1 3 3 3 3)(1 1 1 1 1 1 1 1 1 1 1 3 3 6)(1 1 1 1 1 1 1 1 1 1 1 3 9)(1 1 1 1 1 1 1 1 1 1 1 4 4 4)(1 1 1 1 1 1 1 1 1 1 1 6 6)(1 1 1 1 1 1 1 1 1 1 3 3 3 4)(1 1 1 1 1 1 1 1 1 1 3 3 7)(1 1 1 1 1 1 1 1 1 1 3 4 6)(1 1 1 1 1 1 1 1 1 1 4 9)(1 1 1 1 1 1 1 1 1 1 6 7)(1 1 1 1 1 1 1 1 1 3 3 4 4)(1 1 1 1 1 1 1 1 1 3 4 7)(1 1 1 1 1 1 1 1 1 4 4 6)(1 1 1 1 1 1 1 1 1 7 7)(1 1 1 1 1 1 1 1 3 3 3 3 3)(1 1 1 1 1 1 1 1 3 3 3 6)(1 1...\"\n             ),\n        ],\n    )\n    def test_combinationSum(input_array: List[int], sum: int,\n                            expected_result: str):\n>       assert expected_result == combinationSum(input_array, sum)\nE       AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\nE         - (1 1)(1 1)(1 1)(1 1)(1 1)\nE         + (6 8)(7 7)\n\nsrc/test/java/challenges/a20200530_combinationSum/test_combinationSum.py:66: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"src.test.java.challenges.a20200530_combinationSum"},{"name":"suite","value":"test_combinationSum"},{"name":"host","value":"fv-az625-579"},{"name":"thread","value":"2150-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.test.java.challenges.a20200530_combinationSum.test_combinationSum"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_result","value":"'(6 8)(7 7)'"},{"name":"input_array","value":"[6, 8, 7, 7, 9]"},{"name":"sum","value":"14"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":54,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":54},"items":[{"uid":"26814da9a82da101","reportUrl":"https://apetrovskiy.github.io/codeSignTest/111//#testresult/26814da9a82da101","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1668267383244,"stop":1668267383244,"duration":0}},{"uid":"b8bb5fa632bb18fe","reportUrl":"https://apetrovskiy.github.io/codeSignTest/110//#testresult/b8bb5fa632bb18fe","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1668260798053,"stop":1668260798054,"duration":1}},{"uid":"76e5a6bba5d4ed39","reportUrl":"https://apetrovskiy.github.io/codeSignTest/109//#testresult/76e5a6bba5d4ed39","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1668258843319,"stop":1668258843319,"duration":0}},{"uid":"658ab2225f19e4d8","reportUrl":"https://apetrovskiy.github.io/codeSignTest/108//#testresult/658ab2225f19e4d8","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1627191154072,"stop":1627191154073,"duration":1}},{"uid":"2c5b6658c668113","reportUrl":"https://apetrovskiy.github.io/codeSignTest/107//#testresult/2c5b6658c668113","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1625858287245,"stop":1625858287245,"duration":0}},{"uid":"c1745a33a05eb8f1","reportUrl":"https://apetrovskiy.github.io/codeSignTest/106//#testresult/c1745a33a05eb8f1","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1625858122577,"stop":1625858122578,"duration":1}},{"uid":"e2a1d69cbcc9f169","reportUrl":"https://apetrovskiy.github.io/codeSignTest/105//#testresult/e2a1d69cbcc9f169","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1622041025378,"stop":1622041025379,"duration":1}},{"uid":"28947eff986159a3","reportUrl":"https://apetrovskiy.github.io/codeSignTest/104//#testresult/28947eff986159a3","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1622036132929,"stop":1622036132929,"duration":0}},{"uid":"b5a30396611672b2","reportUrl":"https://apetrovskiy.github.io/codeSignTest/103//#testresult/b5a30396611672b2","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1622015220362,"stop":1622015220363,"duration":1}},{"uid":"ee519d240d508ddf","reportUrl":"https://apetrovskiy.github.io/codeSignTest/102//#testresult/ee519d240d508ddf","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1622011371945,"stop":1622011371945,"duration":0}},{"uid":"48f39300642ac360","reportUrl":"https://apetrovskiy.github.io/codeSignTest/101//#testresult/48f39300642ac360","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1622010789008,"stop":1622010789008,"duration":0}},{"uid":"33ab097726ff7965","reportUrl":"https://apetrovskiy.github.io/codeSignTest/100//#testresult/33ab097726ff7965","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1622009562929,"stop":1622009562929,"duration":0}},{"uid":"5d708613e3310dae","reportUrl":"https://apetrovskiy.github.io/codeSignTest/99//#testresult/5d708613e3310dae","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1621953167756,"stop":1621953167756,"duration":0}},{"uid":"29cc2cfd27731f52","reportUrl":"https://apetrovskiy.github.io/codeSignTest/98//#testresult/29cc2cfd27731f52","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1621950734979,"stop":1621950734979,"duration":0}},{"uid":"bb638a02f453523b","reportUrl":"https://apetrovskiy.github.io/codeSignTest/96//#testresult/bb638a02f453523b","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1621949362536,"stop":1621949362537,"duration":1}},{"uid":"8126606704ff6c08","reportUrl":"https://apetrovskiy.github.io/codeSignTest/95//#testresult/8126606704ff6c08","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1621531932224,"stop":1621531932225,"duration":1}},{"uid":"ab09b6aef03f4dd2","reportUrl":"https://apetrovskiy.github.io/codeSignTest/94//#testresult/ab09b6aef03f4dd2","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1620951308858,"stop":1620951308858,"duration":0}},{"uid":"cfebc325382c7ac2","reportUrl":"https://apetrovskiy.github.io/codeSignTest/92//#testresult/cfebc325382c7ac2","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1620951226638,"stop":1620951226638,"duration":0}},{"uid":"5ef660b2e373bfeb","reportUrl":"https://apetrovskiy.github.io/codeSignTest/91//#testresult/5ef660b2e373bfeb","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1620951214444,"stop":1620951214444,"duration":0}},{"uid":"6fac5ce4cc04c8e6","reportUrl":"https://apetrovskiy.github.io/codeSignTest/90//#testresult/6fac5ce4cc04c8e6","status":"failed","statusDetails":"AssertionError: assert '(6 8)(7 7)' == '(1 1)(1 1)(1 1)(1 1)(1 1)'\n  - (1 1)(1 1)(1 1)(1 1)(1 1)\n  + (6 8)(7 7)","time":{"start":1620951121879,"stop":1620951121880,"duration":1}}]},"tags":[]},"source":"45bc178823ca1851.json","parameterValues":["'(6 8)(7 7)'","[6, 8, 7, 7, 9]","14"]}